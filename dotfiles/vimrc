filetype off
filetype plugin indent on
syntax enable 			" Enable syntax highlights

" vundle plugins manager
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
" plugins
Plugin 'fatih/vim-go'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'junegunn/fzf'
Plugin 'tpope/vim-commentary'
" required
call vundle#end()            

se nocompatible
se nowrap
se t_Co=256
se mouse=a
se clipboard=unnamedplus
se laststatus=2
se cursorline
se gfn=DejaVu\ Sans\ Mono\ 12
se ttyfast 			            " Faster redraw
se shortmess+=I 		        " No intro when starting Vim
se smartindent 		            " Smart... indent
se incsearch 			        " Search as typing
se nohlsearch 			        " No highlight search results
se showmatch 			        " When a bracket is inserted, briefly jump to the matching one
se matchtime=3 		            " ... during this time
se virtualedit=onemore 	        " Allow the cursor to move just past the end of the line
se history=100 		            " Keep 100 undo
se wildmenu 			        " Better command-line completion
se scrolloff=10 		        " Always keep 10 lines after or before when scrolling
se sidescrolloff=5 		        " Always keep 5 lines after or before when side scrolling
se noshowmode 			        " Don't display the current mode
se gdefault 			        " The substitute flag g is on
se hidden 			            " Hide the buffer instead of closing when switching
se backspace=indent,eol,start 	" The normal behaviour of backspace
se ignorecase 			        " Search insensitive
se smartcase 			        " ... but smart
se encoding=utf-8  		        " The encoding displayed.
se fileencoding=utf-8  	        " The encoding written to file.
se synmaxcol=300 		        " Don't try to highlight long lines
se autowrite			        " A build automatically saves the file
se listchars=tab:▸\ ,eol:¬      " Use the same symbols as TextMate for tabstops and EOLs
se tabstop=4
se shiftwidth=4
se softtabstop=4
se expandtab
se updatetime=1000
se path+=**

""" Prevent lag when hitting escape
se ttimeoutlen=0
se timeoutlen=1000 
au InsertEnter * set timeout
au InsertLeave * set notimeout

""" Reopen at last position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

""" Map cmd to keys, with optional file type association
function! KeyMap(keys, cmd, ...)
	let keys = "<" . a:keys . ">"
	let filetype = ""
	if a:0 > 0 
	       let filetype = "autocmd FileType " . a:1
	endif
	execute filetype . " nmap " . keys . " " . a:cmd
	execute filetype . " imap " . keys . " <esc>" . a:cmd . " i"
	execute filetype . " vmap " . keys . " <esc>" . a:cmd . " gv"
endfunction

""" Secure quit
function! MyQuit()
	if &modified
		if (confirm("QUIT WITHOUT SAVING ?", "&Yes\n&No", 2)==1)
			q!
		endif
	else
		q
	endif
endfunction

""" Key mappings
call KeyMap("C-b", "<Plug>(go-build)", "go")    " Ctrl B - vim-go build
call KeyMap("F12", ":GoDef<enter>","go")        " F12    - vim-go to definition
call KeyMap("C-s", ":w<enter>")                 " Ctrl S - Save
call KeyMap("C-f", "/")                         " Ctrl F - Find
call KeyMap("C-h", ":%s/")                      " Ctrl H - Search and Replace
call KeyMap("C-q", ":call MyQuit()<enter>")     " Ctrl Q - Quit
call KeyMap("C-p", ":FZF<enter>")               " Ctrl P - FZF Search

""" dedicated key mappings for Commentary =>    Ctrl /
imap <c-_> <Esc><Plug>CommentaryLineA
nmap <c-_> <Plug>CommentaryLine
xmap <c-_> <Plug>Commentary

""" Color Scheme
colorscheme monokai
