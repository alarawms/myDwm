filetype off
filetype plugin indent on
syntax enable 			" Enable syntax highlights

" vim-plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
Plug 'fatih/vim-go'
Plug 'fatih/molokai'
Plug 'SirVer/ultisnips'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'junegunn/fzf'
Plug 'tpope/vim-commentary'
Plug 'airblade/vim-gitgutter'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" required
call plug#end()            

""" Color Scheme
let g:rehash256 = 1
let g:molokai_original = 1
colorscheme molokai

""" Configure Go default
let g:go_auto_type_info = 1         " always show info
let g:go_rename_command = "gopls"   " use gopls to rename

se nocompatible
se nowrap
se t_Co=256
se mouse=a
se clipboard=unnamedplus
se laststatus=2
se cursorline
se cursorcolumn
se gfn=DejaVu\ Sans\ Mono\ 12
se ttyfast 			            " Faster redraw
se shortmess+=I 		        " No intro when starting Vim
se smartindent 		            " Smart... indent
se incsearch 			        " Search as typing
se nohlsearch 			        " No highlight search results
se showmatch 			        " When a bracket is inserted, briefly jump to the matching one
se matchtime=3 		            " ... during this time
se virtualedit=onemore 	        " Allow the cursor to move just past the end of the line
se history=100 		            " Keep 100 undo
se wildmenu 			        " Better command-line completion
se scrolloff=10 		        " Always keep 10 lines after or before when scrolling
se sidescrolloff=5 		        " Always keep 5 lines after or before when side scrolling
se noshowmode 			        " Don't display the current mode
se gdefault 			        " The substitute flag g is on
se hidden 			            " Hide the buffer instead of closing when switching
se backspace=indent,eol,start 	" The normal behaviour of backspace
se ignorecase 			        " Search insensitive
se smartcase 			        " ... but smart
se encoding=utf-8  		        " The encoding displayed.
se fileencoding=utf-8  	        " The encoding written to file.
se synmaxcol=300 		        " Don't try to highlight long lines
se autowrite			        " A build automatically saves the file
se listchars=tab:▸\ ,eol:¬      " Use the same symbols as TextMate for tabstops and EOLs
se colorcolumn=80               " Mark 80th column
se signcolumn=number            " Enough left space to indicators
se nu                           " Show number line

se tabstop=4
se shiftwidth=4
se softtabstop=4
se expandtab
se updatetime=100
se path+=**

""" swap files in common folders
let s:VIMROOT = $HOME."/.vim"
let &runtimepath=s:VIMROOT."," . &runtimepath
" Create necessary folders if they don't already exist.
if exists("*mkdir")
    silent! call mkdir(s:VIMROOT, "p")
    silent! call mkdir(s:VIMROOT."/bundle", "p")
    silent! call mkdir(s:VIMROOT."/swap", "p")
    silent! call mkdir(s:VIMROOT."/undo", "p")
    silent! call mkdir(s:VIMROOT."/backup", "p")
else
    echo "Error: Create the directories ".s:VIMROOT."/, ".s:VIMROOT."/bundle/, ".s:VIMROOT."/undo/, ".s:VIMROOT."/backup/, and ".s:VIMROOT."/swap/ first."
    exit
endif
" double slash means make the filenames unique
let &backupdir=s:VIMROOT.'/backup//'
let &directory=s:VIMROOT.'/swap//'
let &undodir=s:VIMROOT.'/undo//'

""" Prevent lag when hitting escape
se ttimeoutlen=0
se timeoutlen=1000 
au InsertEnter * set timeout
au InsertLeave * set notimeout

""" Reopen at last position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" KEY MAPPINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""" Utility to map cmd to keys, with optional file type association
""" (automatically add a CR and return to correct mode)
function! KM(keys, cmd, ...)
	let keys = "<" . a:keys . ">"
	let filetype = ""
	if a:0 > 0 
	       let filetype = "autocmd FileType " . a:1
	endif
	execute filetype . " nnoremap " . keys . " " . a:cmd . "<cr>"
	execute filetype . " inoremap " . keys . " <esc>" . a:cmd . "<cr> i"
	execute filetype . " vnoremap " . keys . " <esc>" . a:cmd . "<cr> gv"
endfunction

""" Simple one to map and wait user interaction 
""" (no CR and stay in normal mode)
function! KMI(keys, cmd)
	let keys = "<" . a:keys . ">"
	execute "nnoremap " . keys . " " . a:cmd
	execute "inoremap " . keys . " <esc>" . a:cmd
	execute "vnoremap " . keys . " <esc>" . a:cmd
endfunction

""" Secure quit
function! Quit()
	if &modified
		if (confirm("QUIT WITHOUT SAVING ?", "&Yes\n&No", 2)==1)
			q!
		endif
	else
		q
	endif
endfunction

""" General Key mappings
call KM("F1",  ":cwin")              " F1     - Show Quickfix
call KM("C-s", ":w")                 " Ctrl S - Save
call KMI("C-f", "/")                 " Ctrl F - Find
call KMI("C-h", ":%s/")              " Ctrl H - Search and Replace
call KM("C-q", ":call Quit()")       " Ctrl Q - Quit
call KM("C-p", ":FZF")               " Ctrl P - Fuzzy finder
call KM("C-z", ":undo")              " Ctrl Z - Undo
""" Follow links in markdown         " Ctrl l - Follow wiki links
call KM("c-l", "yi]:e <c-r>\".md", "markdown") 
""" Key mappings for Go
call KM("F2",  ":GoRename","go")     " F2     - vim-go to rename
call KM("F12", ":GoDef","go")        " F12    - vim-go to definition
call KM("C-b", ":GoBuild", "go")     " Ctrl B - vim-go build
""" key mappings for Commentary      " Ctrl / - Comment line or selection
imap <c-_> <Esc><Plug>CommentaryLineA
nmap <c-_> <Plug>CommentaryLine
xmap <c-_> <Plug>Commentary
""" key mapping for moving lines     " Ctrl up/down - Move line or selection
nnoremap <C-down> :m .+1<CR>==
inoremap <C-down> <Esc>:m .+1<CR>==gi
vnoremap <C-down> :m '>+1<CR>gv=gv
nnoremap <C-up> :m .-2<CR>==
inoremap <C-up> <Esc>:m .-2<CR>==gi
vnoremap <C-up> :m '<-2<CR>gv=gv

""" Special Key mappings in insert mode
" jj for escape
inoremap jj <esc>
" fix ctrl-v by forcing an esc
inoremap <c-v> <esc>`^<c-v>

